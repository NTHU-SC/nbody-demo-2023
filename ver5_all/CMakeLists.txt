cmake_minimum_required(VERSION 3.21)
project(Nbody-Demo VERSION 0.1
  DESCRIPTION "Nbody simulation with various offload models for GPU"
  LANGUAGES CXX)

cmake_policy(SET CMP0074 NEW)  
set(CMAKE_CXX_EXTENSIONS OFF)

option(SYCL "Use SYCL buffer implementation" FALSE)
option(SYCL_USM "Use SYCL Intel USM implementation" FALSE)
option(CUDA "Use CUDA implementation" FALSE)
option(OMPT "Use OpenMP Target implementation" FALSE)
option(OPENCL "Use OpenMP Target implementation" FALSE)
option(HIP "Use HIP implementation" FALSE)
option(Kokkos_SYCL "Use Kokkos::Experimental::SYCL implementation" FALSE)
option(Kokkos_CUDA "Use Kokkos::CUDA implementation" FALSE)
option(Kokkos_OMPT_INTEL "Use Kokkos::Experimental::OpenMPTarget Intel OneAPI implementation (requires icpx)" FALSE)
option(Kokkos_OMPT_NVIDIA "Use Kokkos::Experimental::OpenMPTarget Nvidia NVPTX implementation (requires clang with -fopenmp-targets=nvptx64" FALSE)

add_compile_options(-O2)
include_directories(./)
set(BASE_SRC main.cpp GSimulation.cpp)
set(CXX_STANDARD 14)

### SYCL ###
if(SYCL)
  set(SOURCE ${BASE_SRC} ./programming_models/sycl/Compute.cpp)
  add_executable(nbody_sycl ${SOURCE})
  target_compile_options(nbody_sycl PUBLIC -DUSE_SYCL)
  if (CMAKE_CXX_COMPILER_ID MATCHES "IntelLLVM") 
    target_compile_options(nbody_sycl PUBLIC -fsycl -fsycl-unnamed-lambda)
    target_link_options(nbody_sycl PUBLIC -fsycl)
  elseif(CMAKE_CXX_COMPILER MATCHES compute++)
    message(WARNING "CodePlay not tested with CMake")
    target_compile_options(nbody_sycl -lComputeCpp -sycl-driver)
  endif()
endif()

if(SYCL_USM)
  set(SOURCE ${BASE_SRC} ./programming_models/sycl_usm/Compute.cpp)
  add_executable(nbody_sycl_usm ${SOURCE})
  target_compile_options(nbody_sycl_usm PUBLIC -DUSE_SYCL)
  target_compile_options(nbody_sycl_usm PUBLIC -DUSM)

  if (CMAKE_CXX_COMPILER_ID MATCHES "IntelLLVM") 
    target_compile_options(nbody_sycl_usm PUBLIC -fsycl -fsycl-unnamed-lambda)
    target_link_options(nbody_sycl_usm PUBLIC -fsycl)
  elseif(CMAKE_CXX_COMPILER MATCHES compute++)
    message(FATAL_ERROR "CodePlay does not support USM")
  endif()
endif()
### SYCL ###

if(CUDA)
  enable_language(CUDA)
  find_package(CUDA REQUIRED)
  set(SOURCE ${BASE_SRC} ./programming_models/cuda/Compute.cu)
  add_executable(nbody_cuda ${SOURCE})
endif()

if(Kokkos_CUDA)
  enable_language(CUDA)
  set(SOURCE ${BASE_SRC} ./programming_models/kokkos/Compute.cpp)
  add_executable(nbody_kokkos_cuda ${SOURCE})
  find_package(Kokkos REQUIRED)
  message(STATUS "\nFound Kokkos ${Kokkos_DIR}")
  if(NOT Kokkos_ENABLE_CUDA)
    message(FATAL_ERROR "CUDA device is not enabled in Kokkos")
  endif()
  if(Kokkos_ENABLE_OPENMP)
    find_package(OpenMP REQUIRED)
    target_link_libraries(nbody_kokkos_cuda OpenMP::OpenMP_CXX)
  endif()
  target_compile_options(nbody_kokkos_cuda PUBLIC -DKOKKOS_CUDA)
  #target_compile_options(nbody_kokkos_cuda PUBLIC -arch=sm_75 --expt-extended-lambda)
  target_link_libraries(nbody_kokkos_cuda Kokkos::kokkos)
endif()

if(Kokkos_SYCL)
  set(SOURCE ${BASE_SRC} ./programming_models/kokkos/Compute.cpp)
  add_executable(nbody_kokkos_sycl ${SOURCE})
  find_package(Kokkos REQUIRED)
  message(STATUS "\nFound Kokkos ${Kokkos_DIR}")
  if(NOT Kokkos_ENABLE_SYCL)
    message(FATAL_ERROR "SYCL device is not enabled in Kokkos")
  endif()
  if(Kokkos_ENABLE_OPENMP)
    find_package(OpenMP REQUIRED)
    target_link_libraries(nbody_kokkos_sycl OpenMP::OpenMP_CXX)
  endif()
  target_compile_options(nbody_kokkos_sycl PUBLIC -DKOKKOS_SYCL)
  target_link_libraries(nbody_kokkos_sycl Kokkos::kokkos)
endif()

if(Kokkos_OMPT_INTEL)
  if (NOT CMAKE_CXX_COMPILER_ID MATCHES IntelLLVM) 
    message(FATAL_ERROR "Kokkos_OMPT_INTEL requires OneAPI compiler icpx")
  endif()

  set(SOURCE ${BASE_SRC} ./programming_models/kokkos/Compute.cpp)
  add_executable(nbody_kokkos_ompt_intel ${SOURCE})
  find_package(Kokkos REQUIRED)
  message(STATUS "\nFound Kokkos ${Kokkos_DIR}")
  if(NOT Kokkos_ENABLE_OPENMPTARGET)
    message(FATAL_ERROR "OpenMPTarget device is not enabled in Kokkos")
  endif()
  if(Kokkos_ENABLE_OPENMP)
    find_package(OpenMP REQUIRED)
    target_link_libraries(nbody_kokkos_ompt_intel OpenMP::OpenMP_CXX)
  endif()
  target_compile_options(nbody_kokkos_ompt_intel PUBLIC -DKOKKOS_OPENMPTARGET)
  target_link_libraries(nbody_kokkos_ompt_intel Kokkos::kokkos)
endif()

if(Kokkos_OMPT_NVIDIA)
  set(SOURCE ${BASE_SRC} ./programming_models/kokkos/Compute.cpp)
  add_executable(nbody_kokkos_ompt_nvidia ${SOURCE})
  find_package(Kokkos REQUIRED)
  message(STATUS "\nFound Kokkos ${Kokkos_DIR}")
  if(NOT Kokkos_ENABLE_OPENMPTARGET)
    message(FATAL_ERROR "OpenMPTarget device is not enabled in Kokkos")
  endif()
  if(Kokkos_ENABLE_OPENMP)
    find_package(OpenMP REQUIRED)
    target_link_libraries(nbody_kokkos_ompt_nvidia OpenMP::OpenMP_CXX)
  endif()
  target_compile_options(nbody_kokkos_ompt_nvidia PUBLIC -DKOKKOS_OPENMPTARGET)
  target_link_options(nbody_kokkos_ompt_nvidia PUBLIC -lstdc++ -lm)
  target_link_libraries(nbody_kokkos_ompt_nvidia Kokkos::kokkos)
endif()

