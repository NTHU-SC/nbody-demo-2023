cmake_minimum_required(VERSION 3.0.0)
project(Nbody-Demo VERSION 0.1.0)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_EXTENSIONS OFF)
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
endif()

option(AOT "Ahead of time compilation" OFF)

include(CTest)
enable_testing()
add_executable(nbody)
list(APPEND BACKENDS "sycl" "ompt" "kokkos")
set(BACKEND "ompt" CACHE STRING "Possible values: kokkos, ompt, sycl, sycl-buffers")
include_directories(./)
set(BACKEND_SRC programming_models/cpu/Compute.cpp)
if(BACKEND STREQUAL "sycl")
    set(BACKEND_SRC programming_models/sycl_usm/Compute.cpp)
    set(CPPFLAGS -fsycl -fsycl-unnamed-lambda -DUSE_SYCL)
    set(LINK_FLAGS -fsycl)
    set(EXENAME nbody-${BACKEND})
elseif(BACKEND STREQUAL "sycl-buffers")
    set(BACKEND_SRC programming_models/sycl/Compute.cpp)
    set(CPPFLAGS -fsycl -fsycl-unnamed-lambda -DUSE_SYCL)
    set(LINK_FLAGS -fsycl)
    set(EXENAME nbody-${BACKEND})
elseif(BACKEND STREQUAL "ompt")
    set(BACKEND_SRC programming_models/openmp/Compute.cpp)
    set(CPPFLAGS -fiopenmp -fopenmp-targets=spir64)
    set(LINK_FLAGS -fiopenmp -fopenmp-targets=spir64)
    set(EXENAME nbody-${BACKEND})
elseif(BACKEND STREQUAL "kokkos")
    FIND_PACKAGE(Kokkos REQUIRED NO_CACHE)
    if(Kokkos_ENABLE_SYCL)
        set(EXENAME nbody-kokkos-sycl)
        list(APPEND CPPFLAGS -fsycl -fsycl-unnamed-lambda)
        set(LINK_FLAGS -fsycl)
    elseif(Kokkos_ENABLE_OPENMPTARGET)
        set(CPPFLAGS -fiopenmp -fopenmp-targets=spir64)
        set(LINK_FLAGS -fiopenmp -fopenmp-targets=spir64)
        set(EXENAME nbody-kokkos-ompt)
    endif()
    set(BACKEND_SRC programming_models/kokkos/Compute.cpp)
    target_link_libraries(nbody Kokkos::kokkos)
endif()

message(STATUS "Building ${EXENAME}")
target_sources(nbody PRIVATE main.cpp GSimulation.cpp ${BACKEND_SRC})
target_compile_options(nbody PRIVATE ${CPPFLAGS})
target_link_options(nbody PRIVATE ${LINK_FLAGS})
set_target_properties(nbody PROPERTIES OUTPUT_NAME ${EXENAME})
set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
